{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { ViewMode } from \"../interfaces\";\nimport * as i0 from \"@angular/core\";\nDate.prototype.adjustDate = function (num = 0) {\n  let date = new Date(this);\n  date.setDate(date.getDate() + num);\n  return date;\n};\n/** Adjust & setDate = 1 */\nDate.prototype.adjustMonth = function (num = 0) {\n  this.setDate(1);\n  this.setMonth(this.getMonth() + num);\n  return this;\n};\n/** Adjust & setDate = 1 */\nDate.prototype.adjustYear = function (num = 0) {\n  this.setDate(1);\n  this.setMonth(0);\n  this.setYear(this.getFullYear() + num);\n  return this;\n};\nDate.prototype.getDayWithStart = function (start) {\n  const date = new Date(this.getTime());\n  let day = date.getDay();\n  day = day - start;\n  if (day < 0) {\n    day = 7 + day;\n  }\n  return day;\n};\nDate.prototype.getFirstDateDay = function (start) {\n  const date = new Date(this.getTime());\n  date.setDate(1);\n  return date.getDayWithStart(start);\n};\nDate.prototype.getYmd = function () {\n  return this.getFullYear().toString() + String(this.getMonth().toString()).padStart(2, \"0\") + String(this.getDate().toString()).padStart(2, \"0\");\n};\nexport let CalendarService = /*#__PURE__*/(() => {\n  class CalendarService {\n    constructor() {\n      this.selectedDates = new BehaviorSubject([]);\n      this.disabledDates = new BehaviorSubject(null);\n      this.days = new BehaviorSubject([]);\n      this.animationStep = new BehaviorSubject(\"stop\");\n      this.recountWidth = new BehaviorSubject(1);\n      /** Needs for onClickDay detect change */\n      this.clickDayKey = new BehaviorSubject(null);\n      this.updateDate = new BehaviorSubject(new Date());\n    }\n    setSelectedDates(selectedDates) {\n      this.selectedDates.next(selectedDates);\n    }\n    setDisabledDates(disabledDates) {\n      this.disabledDates.next(disabledDates);\n    }\n    setDays(days) {\n      this.days.next(days);\n    }\n    setShownDate(date) {\n      this.shownDate = date;\n    }\n    addSelected(date) {\n      let selectedDates = this.selectedDates.value;\n      selectedDates.push(date);\n      this.selectedDates.next(selectedDates);\n    }\n    getCountMonths() {\n      let viewMode = this.viewMode;\n      if (typeof viewMode === \"number\") {\n        return viewMode;\n      } else {\n        if (viewMode === ViewMode.Quarter) {\n          return 3;\n        } else if (viewMode === ViewMode.Semester) {\n          return 6;\n        }\n      }\n      return 1;\n    }\n    getLastDate(date) {\n      //console.log(date, 'date getlasr')\n      let viewMode = this.viewMode;\n      let lastDate = this.shownDate ? new Date(this.shownDate) : this.selectedDates.value ? new Date(this.selectedDates[this.selectedDates.value.length - 1]) : new Date();\n      lastDate = date ? new Date(date) : lastDate;\n      //if (typeof viewMode === \"ViewMode\") {\n      if (viewMode === ViewMode.Quarter) {\n        if (lastDate.getMonth() >= 0 && lastDate.getMonth() <= 2) {\n          lastDate.setMonth(2);\n        } else if (lastDate.getMonth() >= 3 && lastDate.getMonth() <= 5) {\n          lastDate.setMonth(5);\n        } else if (lastDate.getMonth() >= 6 && lastDate.getMonth() <= 8) {\n          lastDate.setMonth(8);\n        } else if (lastDate.getMonth() >= 9 && lastDate.getMonth() <= 11) {\n          lastDate.setMonth(11);\n        }\n      } else if (viewMode === ViewMode.Semester) {\n        if (lastDate.getMonth() >= 0 && lastDate.getMonth() <= 5) {\n          lastDate.setMonth(5);\n        } else if (lastDate.getMonth() >= 6 && lastDate.getMonth() <= 11) {\n          lastDate.setMonth(11);\n        }\n      }\n      //}\n      return lastDate;\n    }\n    getShownYears(lastDateShown) {\n      let countMonths = 0;\n      const months = [];\n      countMonths = this.getCountMonths();\n      this.countMonths = countMonths;\n      for (let i = countMonths - 1; i >= 0; i--) {\n        months.push(new Date(lastDateShown).adjustYear(-i));\n      }\n      this.calendar = months;\n      this.viewSelectorMode = \"months\";\n    }\n    getShownMonths(date) {\n      let countMonths = 0;\n      const months = [];\n      let lastDate;\n      lastDate = this.getLastDate(date);\n      countMonths = this.getCountMonths();\n      this.countMonths = countMonths;\n      for (let i = countMonths - 1; i >= 0; i--) {\n        months.push(new Date(lastDate).adjustMonth(-i));\n      }\n      this.calendar = months;\n      this.viewSelectorMode = \"days\";\n    }\n    goPrev(firstDate) {\n      let prevDate = new Date(firstDate);\n      if (this.viewSelectorMode === \"days\") {\n        prevDate.adjustMonth(-1);\n      } else if (this.viewSelectorMode === \"months\") {\n        prevDate.adjustYear(-1);\n      }\n      let dates = [...this.calendar];\n      dates.unshift(prevDate);\n      this.calendar = dates;\n      this.animationStep.next(\"left\");\n      setTimeout(() => {\n        dates = [...this.calendar];\n        dates.splice(dates.length - 1, 1);\n        this.calendar = dates;\n        this.animationStep.next(\"stop\");\n      }, 205);\n    }\n    goNext(lastDate) {\n      let nextDate = new Date(lastDate);\n      if (this.viewSelectorMode === \"days\") {\n        nextDate.adjustMonth(1);\n      } else if (this.viewSelectorMode === \"months\") {\n        nextDate.adjustYear(1);\n      }\n      let dates = [...this.calendar];\n      //dates.splice(0, 1);\n      dates.push(nextDate);\n      this.calendar = dates;\n      this.animationStep.next(\"right\");\n      setTimeout(() => {\n        dates = [...this.calendar];\n        dates.splice(0, 1);\n        this.calendar = dates;\n        this.animationStep.next(\"stop\");\n        //this.recountWidth.next(this.recountWidth.value + 1);\n      }, 205);\n    }\n    static {\n      this.ɵfac = function CalendarService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || CalendarService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CalendarService,\n        factory: CalendarService.ɵfac,\n        providedIn: \"root\"\n      });\n    }\n  }\n  return CalendarService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}