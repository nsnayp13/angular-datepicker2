{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./calendar.service\";\nexport let DayService = /*#__PURE__*/(() => {\n  class DayService {\n    constructor(calendarService) {\n      this.calendarService = calendarService;\n    }\n    getIsDisabled(date) {\n      const disabledDates = this.calendarService.disabledDates.value;\n      if (!disabledDates) {\n        return false;\n      }\n      if (disabledDates.dates && disabledDates.dates.length > 0 && disabledDates.dates.find(disableDate => disableDate.getTime() === date.getTime())) {\n        return true;\n      }\n      if (disabledDates.after && disabledDates.after.getTime() < date.getTime()) {\n        return true;\n      }\n      if (disabledDates.before && disabledDates.before.getTime() > date.getTime()) {\n        return true;\n      }\n      return false;\n    }\n    createDay(date) {\n      this.day = {\n        isDisabled: this.getIsDisabled(date),\n        isWeekEnd: this.calendarService.weekends.includes(date.getDay()),\n        isSelected: false,\n        isHovered: false,\n        isInPeriod: this.getIsInPeriod(date),\n        date: date\n      };\n      return this.day;\n    }\n    getIsInPeriod(date) {\n      if (this.calendarService.selectMode === \"period\" && this.calendarService.selectedDates.value.length == 2 && date.getTime() >= this.calendarService.selectedDates.value[0].getTime() && date.getTime() <= this.calendarService.selectedDates.value[1].getTime()) {\n        return true;\n      }\n      return false;\n    }\n    getDay() {\n      return this.day;\n    }\n    sortByDate(a, b) {\n      if (a.getTime() > b.getTime()) return 1;\n      if (a.getTime() == b.getTime()) return 0;\n      if (a.getTime() < b.getTime()) return -1;\n    }\n    toggleDate() {\n      console.log(\"clicked in service\");\n      this.calendarService.clickDayKey.next({\n        key: new Date().getYmd() + \"\" + Math.random(),\n        day: this.day\n      });\n      if (this.calendarService.selectMode === \"single\") {\n        if (this.calendarService.selectedDates.value.length > 0) {\n          this.calendarService.selectedDates.next([this.day.date]);\n        }\n      } else if (this.calendarService.selectMode === \"multiple\") {\n        if (this.day.isSelected) {\n          let selectedDates = this.calendarService.selectedDates.value.filter(elem => elem.getYmd() !== this.day.date.getYmd());\n          selectedDates.sort(this.sortByDate);\n          this.calendarService.selectedDates.next(selectedDates);\n        } else {\n          let selectedDates = this.calendarService.selectedDates.value;\n          selectedDates.push(this.day.date);\n          this.calendarService.selectedDates.next(selectedDates);\n        }\n      } else if (this.calendarService.selectMode === \"period\") {\n        if (this.day.isSelected) {\n          let selectedDates = this.calendarService.selectedDates.value.filter(elem => elem.getYmd() !== this.day.date.getYmd());\n          this.calendarService.selectedDates.next(selectedDates);\n        } else {\n          if (this.calendarService.selectedDates.value.length == 2) {\n            this.calendarService.selectedDates.next([this.day.date]);\n          } else if (this.calendarService.selectedDates.value.length < 2) {\n            let selectedDates = this.calendarService.selectedDates.value;\n            selectedDates.push(this.day.date);\n            selectedDates.sort(this.sortByDate);\n            //console.log(selectedDates)\n            this.calendarService.selectedDates.next(selectedDates);\n          }\n        }\n      }\n    }\n    static {\n      this.ɵfac = function DayService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || DayService)(i0.ɵɵinject(i1.CalendarService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: DayService,\n        factory: DayService.ɵfac,\n        providedIn: \"root\"\n      });\n    }\n  }\n  return DayService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}