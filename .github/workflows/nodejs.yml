name: Build, Deploy and Publish

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: https://registry.npmjs.org/
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build library
        run: npm run build:lib
        
      - name: Build demo app for GitHub Pages
        run: npm run build:gh-pages
        
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        uses: JamesIves/github-pages-deploy-action@v4.4.3
        with:
          branch: gh-pages
          folder: dist/angular-datepicker
          clean: true

  publish-npm:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    needs: build-and-deploy
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: https://registry.npmjs.org/
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build library
        run: npm run build:lib
        
      - name: Check if version changed
        id: version-check
        run: |
          CURRENT_VERSION=$(node -p "require('./projects/angular-datepicker2/package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check against npm registry to get the actual published version
          NPM_VERSION=$(npm view angular-datepicker2 version 2>/dev/null || echo "0.0.0")
          echo "npm_version=$NPM_VERSION" >> $GITHUB_OUTPUT
          
          # Also check the latest published version (not just the 'latest' tag)
          LATEST_PUBLISHED=$(npm view angular-datepicker2 versions --json 2>/dev/null | jq -r '.[-1]' || echo "0.0.0")
          echo "latest_published=$LATEST_PUBLISHED" >> $GITHUB_OUTPUT
          
          # Compare with the highest version available
          if [ "$CURRENT_VERSION" != "$NPM_VERSION" ] && [ "$CURRENT_VERSION" != "$LATEST_PUBLISHED" ]; then
            # Use node to compare versions properly (simple version comparison)
            VERSION_IS_NEWER=$(node -e "
              function compareVersions(a, b) {
                const aParts = a.split('.').map(Number);
                const bParts = b.split('.').map(Number);
                for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {
                  const aPart = aParts[i] || 0;
                  const bPart = bParts[i] || 0;
                  if (aPart > bPart) return 1;
                  if (aPart < bPart) return -1;
                }
                return 0;
              }
              const current = '$CURRENT_VERSION';
              const npmVer = '$NPM_VERSION';
              const latestPub = '$LATEST_PUBLISHED';
              const highest = compareVersions(npmVer, latestPub) > 0 ? npmVer : latestPub;
              console.log(compareVersions(current, highest) > 0 ? 'true' : 'false');
            ")
            
            if [ "$VERSION_IS_NEWER" = "true" ]; then
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "Version will be published: $CURRENT_VERSION (current npm: $NPM_VERSION, latest published: $LATEST_PUBLISHED)"
            else
              echo "version_changed=false" >> $GITHUB_OUTPUT
              echo "Version $CURRENT_VERSION is not newer than published versions"
            fi
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged or already published: $CURRENT_VERSION"
          fi

      - name: Create Git tag
        if: steps.version-check.outputs.version_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.version-check.outputs.current_version }}" -m "Release v${{ steps.version-check.outputs.current_version }}"
          git push origin "v${{ steps.version-check.outputs.current_version }}"

      - name: Publish to NPM
        if: steps.version-check.outputs.version_changed == 'true'
        run: |
          cd dist/angular-datepicker2
          npm publish --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.version-check.outputs.version_changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version-check.outputs.current_version }}
          release_name: Release v${{ steps.version-check.outputs.current_version }}
          draft: false
          prerelease: false